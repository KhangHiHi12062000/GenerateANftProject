{"ast":null,"code":"// log\nimport { useEffect, useState } from \"react\";\nimport store from \"../store\";\nimport Web3 from \"web3\";\nimport LipToken from \"../../contracts/LipToken.json\";\nexport const [owner, setOwner] = useState();\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\n\nconst getOwnerRequest = payload => {\n  return {\n    type: \"OWNER\",\n    payload: payload\n  };\n};\n\nexport const getOwner = async _id => {\n  const web3 = new Web3(window.ethereum);\n  const networkId = await window.ethereum.request({\n    method: \"net_version\"\n  });\n  const lipTokenNetworkData = await LipToken.networks[networkId];\n\n  if (lipTokenNetworkData) {\n    const contract = await new web3.eth.Contract(LipToken.abi, lipTokenNetworkData.address);\n    const owner = await contract.methods.ownerOf(_id).call();\n    setOwner(owner);\n    return owner;\n  }\n};\nexport const fetchData = account => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let allLips = await store.getState().blockchain.lipToken.methods.getLips().call();\n      let allOwnerLips = await store.getState().blockchain.lipToken.methods.getOwnerLips(account).call();\n      let owner = await store.getState().blockchain.lipToken.methods.ownerOf(allLips[10].id).call();\n      dispatch(fetchDataSuccess({\n        allLips,\n        allOwnerLips,\n        owner\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};","map":{"version":3,"names":["useEffect","useState","store","Web3","LipToken","owner","setOwner","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","getOwnerRequest","getOwner","_id","web3","window","ethereum","networkId","request","method","lipTokenNetworkData","networks","contract","eth","Contract","abi","address","methods","ownerOf","call","fetchData","account","dispatch","allLips","getState","blockchain","lipToken","getLips","allOwnerLips","getOwnerLips","id","err","console","log"],"sources":["/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/data/dataActions.js"],"sourcesContent":["// log\nimport { useEffect, useState } from \"react\";\nimport store from \"../store\";\nimport Web3 from \"web3\";\nimport LipToken from \"../../contracts/LipToken.json\";\n\n\nexport const [owner, setOwner] = useState();\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\nconst getOwnerRequest = (payload) => {\n  return {\n    type: \"OWNER\",\n    payload: payload,\n  };\n};\n\nexport const getOwner = async (_id) => {\n      const web3 = new Web3(window.ethereum);\n      const networkId = await window.ethereum.request({\n        method: \"net_version\",\n      });\n      const lipTokenNetworkData = await LipToken.networks[networkId];\n      if (lipTokenNetworkData) {\n      const contract = await new web3.eth.Contract(\n        LipToken.abi,\n        lipTokenNetworkData.address);\n      const owner = await contract.methods.ownerOf(_id).call();\n      setOwner(owner);\n      return owner;\n      }\n      \n}\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let allLips = await store\n        .getState()\n        .blockchain.lipToken.methods.getLips()\n        .call();\n\n      let allOwnerLips = await store\n        .getState()\n        .blockchain.lipToken.methods.getOwnerLips(account)\n        .call();\n\n      let owner  = await store\n      .getState()\n      .blockchain.lipToken.methods.ownerOf(allLips[10].id)\n      .call();\n\n      dispatch(\n        fetchDataSuccess({\n          allLips,\n          allOwnerLips,\n          owner,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n"],"mappings":"AAAA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,+BAArB;AAGA,OAAO,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,EAAlC;;AAEP,MAAMM,gBAAgB,GAAG,MAAM;EAC7B,OAAO;IACLC,IAAI,EAAE;EADD,CAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;EACpC,OAAO;IACLF,IAAI,EAAE,oBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,MAAMC,eAAe,GAAID,OAAD,IAAa;EACnC,OAAO;IACLF,IAAI,EAAE,mBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAMA,MAAME,eAAe,GAAIF,OAAD,IAAa;EACnC,OAAO;IACLF,IAAI,EAAE,OADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,OAAO,MAAMG,QAAQ,GAAG,MAAOC,GAAP,IAAe;EACjC,MAAMC,IAAI,GAAG,IAAIZ,IAAJ,CAASa,MAAM,CAACC,QAAhB,CAAb;EACA,MAAMC,SAAS,GAAG,MAAMF,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB;IAC9CC,MAAM,EAAE;EADsC,CAAxB,CAAxB;EAGA,MAAMC,mBAAmB,GAAG,MAAMjB,QAAQ,CAACkB,QAAT,CAAkBJ,SAAlB,CAAlC;;EACA,IAAIG,mBAAJ,EAAyB;IACzB,MAAME,QAAQ,GAAG,MAAM,IAAIR,IAAI,CAACS,GAAL,CAASC,QAAb,CACrBrB,QAAQ,CAACsB,GADY,EAErBL,mBAAmB,CAACM,OAFC,CAAvB;IAGA,MAAMtB,KAAK,GAAG,MAAMkB,QAAQ,CAACK,OAAT,CAAiBC,OAAjB,CAAyBf,GAAzB,EAA8BgB,IAA9B,EAApB;IACAxB,QAAQ,CAACD,KAAD,CAAR;IACA,OAAOA,KAAP;EACC;AAEN,CAfM;AAiBP,OAAO,MAAM0B,SAAS,GAAIC,OAAD,IAAa;EACpC,OAAO,MAAOC,QAAP,IAAoB;IACzBA,QAAQ,CAAC1B,gBAAgB,EAAjB,CAAR;;IACA,IAAI;MACF,IAAI2B,OAAO,GAAG,MAAMhC,KAAK,CACtBiC,QADiB,GAEjBC,UAFiB,CAENC,QAFM,CAEGT,OAFH,CAEWU,OAFX,GAGjBR,IAHiB,EAApB;MAKA,IAAIS,YAAY,GAAG,MAAMrC,KAAK,CAC3BiC,QADsB,GAEtBC,UAFsB,CAEXC,QAFW,CAEFT,OAFE,CAEMY,YAFN,CAEmBR,OAFnB,EAGtBF,IAHsB,EAAzB;MAKA,IAAIzB,KAAK,GAAI,MAAMH,KAAK,CACvBiC,QADkB,GAElBC,UAFkB,CAEPC,QAFO,CAEET,OAFF,CAEUC,OAFV,CAEkBK,OAAO,CAAC,EAAD,CAAP,CAAYO,EAF9B,EAGlBX,IAHkB,EAAnB;MAKAG,QAAQ,CACNxB,gBAAgB,CAAC;QACfyB,OADe;QAEfK,YAFe;QAGflC;MAHe,CAAD,CADV,CAAR;IAOD,CAvBD,CAuBE,OAAOqC,GAAP,EAAY;MACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACAT,QAAQ,CAACtB,eAAe,CAAC,oCAAD,CAAhB,CAAR;IACD;EACF,CA7BD;AA8BD,CA/BM"},"metadata":{},"sourceType":"module"}