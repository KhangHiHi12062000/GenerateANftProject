{"ast":null,"code":"// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\n\nexport const fetchData = account => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      console.log(\"l1\");\n      let allLips = await store.getState().blockchain.lipToken.methods.getLips().call(); // let allOwnerLips = await store\n      //   .getState()\n      //   .blockchain.lipToken.methods.getOwnerLips(account)\n      //   .call();\n\n      dispatch(fetchDataSuccess({\n        allLips //allOwnerLips,\n\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};","map":{"version":3,"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData","account","dispatch","console","log","allLips","getState","blockchain","lipToken","methods","getLips","call","err"],"sources":["/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/data/dataActions.js"],"sourcesContent":["// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      console.log(\"l1\");\n      let allLips = await store\n        .getState()\n        .blockchain.lipToken.methods.getLips()\n        .call();\n\n      // let allOwnerLips = await store\n      //   .getState()\n      //   .blockchain.lipToken.methods.getOwnerLips(account)\n      //   .call();\n\n      dispatch(\n        fetchDataSuccess({\n          allLips,\n          //allOwnerLips,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;EAC7B,OAAO;IACLC,IAAI,EAAE;EADD,CAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;EACpC,OAAO;IACLF,IAAI,EAAE,oBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,MAAMC,eAAe,GAAID,OAAD,IAAa;EACnC,OAAO;IACLF,IAAI,EAAE,mBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,OAAO,MAAME,SAAS,GAAIC,OAAD,IAAa;EACpC,OAAO,MAAOC,QAAP,IAAoB;IACzBA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;;IACA,IAAI;MACFQ,OAAO,CAACC,GAAR,CAAY,IAAZ;MACA,IAAIC,OAAO,GAAG,MAAMX,KAAK,CACtBY,QADiB,GAEjBC,UAFiB,CAENC,QAFM,CAEGC,OAFH,CAEWC,OAFX,GAGjBC,IAHiB,EAApB,CAFE,CAOF;MACA;MACA;MACA;;MAEAT,QAAQ,CACNL,gBAAgB,CAAC;QACfQ,OADe,CAEf;;MAFe,CAAD,CADV,CAAR;IAMD,CAlBD,CAkBE,OAAOO,GAAP,EAAY;MACZT,OAAO,CAACC,GAAR,CAAYQ,GAAZ;MACAV,QAAQ,CAACH,eAAe,CAAC,oCAAD,CAAhB,CAAR;IACD;EACF,CAxBD;AAyBD,CA1BM"},"metadata":{},"sourceType":"module"}