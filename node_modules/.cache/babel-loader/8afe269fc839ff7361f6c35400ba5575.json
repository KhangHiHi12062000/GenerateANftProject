{"ast":null,"code":"// constants\nimport Web3 from \"web3\";\nimport LipToken from \"../../contracts/LipToken.json\";\nimport NFTTrader from \"../../contracts/NFTTrader.json\"; // log\n\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\"\n  };\n};\n\nconst connectSuccess = payload => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst connectFailed = payload => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload\n  };\n};\n\nconst updateAccountRequest = payload => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload\n  };\n};\n\nexport const sendTransacsion = (_acount, _to) => {\n  return async dispatch => {\n    try {\n      let params = [{\n        \"from\": _acount,\n        \"to\": _to,\n        \"gas\": Number(30000).toString(16),\n        \"gasPrice\": Number(250000000).toString(16),\n        \"value\": Number(10000000000000000000).toString(16)\n      }];\n      const accounts = await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\n\nconst getOwnerRequest = payload => {\n  return {\n    type: \"OWNER\",\n    payload: payload\n  };\n};\n\nconst sendTransacsionRequest = payload => {\n  return {\n    type: \"SEND\",\n    payload: payload\n  };\n};\n\nexport const connect = () => {\n  return async dispatch => {\n    dispatch(connectRequest());\n\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\"\n        });\n        console.log(networkId);\n        const lipTokenNetworkData = await LipToken.networks[networkId];\n        console.log(lipTokenNetworkData);\n        const nftTraderNetwork = await NFTTrader.networks[networkId];\n        console.log(nftTraderNetwork);\n\n        if (lipTokenNetworkData) {\n          web3.eth.getAccounts();\n          const lipToken = new web3.eth.Contract(LipToken.abi, lipTokenNetworkData.address);\n          dispatch(connectSuccess({\n            account: accounts[0],\n            lipToken: lipToken,\n            web3: web3\n          })); // Add listeners start\n\n          window.ethereum.on(\"accountsChanged\", accounts => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          }); // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Polygon.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\nexport const updateAccount = account => {\n  return async dispatch => {\n    dispatch(updateAccountRequest({\n      account: account\n    }));\n    dispatch(fetchData(account));\n  };\n};","map":{"version":3,"names":["Web3","LipToken","NFTTrader","fetchData","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","sendTransacsion","_acount","_to","dispatch","params","Number","toString","accounts","window","ethereum","request","method","err","console","log","getOwnerRequest","sendTransacsionRequest","connect","web3","networkId","lipTokenNetworkData","networks","nftTraderNetwork","eth","getAccounts","lipToken","Contract","abi","address","account","on","updateAccount","location","reload"],"sources":["/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/blockchain/blockchainActions.js"],"sourcesContent":["// constants\nimport Web3 from \"web3\";\nimport LipToken from \"../../contracts/LipToken.json\";\nimport NFTTrader from \"../../contracts/NFTTrader.json\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const sendTransacsion = (_acount, _to) =>{\n  return async (dispatch) => {\n      try {\n        let params = [{\n          \"from\":_acount,\n          \"to\":_to,\n          \"gas\": Number(30000).toString(16),\n          \"gasPrice\":Number(250000000).toString(16),\n          \"value\":Number(10000000000000000000).toString(16),\n        }];\n\n        const accounts = await window.ethereum.request({\n          method: \"eth_sendTransaction\", params\n        });\n      } catch (err) {\n        console.log(err);        \n      }\n\n};\n};\n\n\nconst getOwnerRequest = (payload) => {\n  return{\n    type: \"OWNER\",\n    payload: payload,\n  };\n};\nconst sendTransacsionRequest = (payload) => {\n  return{\n    type: \"SEND\",\n    payload: payload,\n  };\n};\n\n\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\",\n        });\n        console.log(networkId);\n        const lipTokenNetworkData = await LipToken.networks[networkId];\n        console.log(lipTokenNetworkData);\n        const nftTraderNetwork = await NFTTrader.networks[networkId];\n        console.log(nftTraderNetwork);\n        if (lipTokenNetworkData) {\n          web3.eth.getAccounts();\n            const lipToken = new web3.eth.Contract(\n            LipToken.abi,\n            lipTokenNetworkData.address\n          );\n            \n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              lipToken: lipToken,\n              web3: web3,\n            })\n          );\n\n          // Add listeners start\n          \n          window.ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Polygon.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"],"mappings":"AAAA;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,SAAP,MAAsB,gCAAtB,C,CACA;;AACA,SAASC,SAAT,QAA0B,qBAA1B;;AAEA,MAAMC,cAAc,GAAG,MAAM;EAC3B,OAAO;IACLC,IAAI,EAAE;EADD,CAAP;AAGD,CAJD;;AAMA,MAAMC,cAAc,GAAIC,OAAD,IAAa;EAClC,OAAO;IACLF,IAAI,EAAE,oBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAMA,MAAMC,aAAa,GAAID,OAAD,IAAa;EACjC,OAAO;IACLF,IAAI,EAAE,mBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,MAAME,oBAAoB,GAAIF,OAAD,IAAa;EACxC,OAAO;IACLF,IAAI,EAAE,gBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,OAAO,MAAMG,eAAe,GAAG,CAACC,OAAD,EAAUC,GAAV,KAAiB;EAC9C,OAAO,MAAOC,QAAP,IAAoB;IACvB,IAAI;MACF,IAAIC,MAAM,GAAG,CAAC;QACZ,QAAOH,OADK;QAEZ,MAAKC,GAFO;QAGZ,OAAOG,MAAM,CAAC,KAAD,CAAN,CAAcC,QAAd,CAAuB,EAAvB,CAHK;QAIZ,YAAWD,MAAM,CAAC,SAAD,CAAN,CAAkBC,QAAlB,CAA2B,EAA3B,CAJC;QAKZ,SAAQD,MAAM,CAAC,oBAAD,CAAN,CAA6BC,QAA7B,CAAsC,EAAtC;MALI,CAAD,CAAb;MAQA,MAAMC,QAAQ,GAAG,MAAMC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;QAC7CC,MAAM,EAAE,qBADqC;QACdP;MADc,CAAxB,CAAvB;IAGD,CAZD,CAYE,OAAOQ,GAAP,EAAY;MACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;IACD;EAEN,CAjBC;AAkBD,CAnBM;;AAsBP,MAAMG,eAAe,GAAIlB,OAAD,IAAa;EACnC,OAAM;IACJF,IAAI,EAAE,OADF;IAEJE,OAAO,EAAEA;EAFL,CAAN;AAID,CALD;;AAMA,MAAMmB,sBAAsB,GAAInB,OAAD,IAAa;EAC1C,OAAM;IACJF,IAAI,EAAE,MADF;IAEJE,OAAO,EAAEA;EAFL,CAAN;AAID,CALD;;AASA,OAAO,MAAMoB,OAAO,GAAG,MAAM;EAC3B,OAAO,MAAOd,QAAP,IAAoB;IACzBA,QAAQ,CAACT,cAAc,EAAf,CAAR;;IACA,IAAIc,MAAM,CAACC,QAAX,EAAqB;MACnB,IAAIS,IAAI,GAAG,IAAI5B,IAAJ,CAASkB,MAAM,CAACC,QAAhB,CAAX;;MACA,IAAI;QACF,MAAMF,QAAQ,GAAG,MAAMC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;UAC7CC,MAAM,EAAE;QADqC,CAAxB,CAAvB;QAGA,MAAMQ,SAAS,GAAG,MAAMX,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;UAC9CC,MAAM,EAAE;QADsC,CAAxB,CAAxB;QAGAE,OAAO,CAACC,GAAR,CAAYK,SAAZ;QACA,MAAMC,mBAAmB,GAAG,MAAM7B,QAAQ,CAAC8B,QAAT,CAAkBF,SAAlB,CAAlC;QACAN,OAAO,CAACC,GAAR,CAAYM,mBAAZ;QACA,MAAME,gBAAgB,GAAG,MAAM9B,SAAS,CAAC6B,QAAV,CAAmBF,SAAnB,CAA/B;QACAN,OAAO,CAACC,GAAR,CAAYQ,gBAAZ;;QACA,IAAIF,mBAAJ,EAAyB;UACvBF,IAAI,CAACK,GAAL,CAASC,WAAT;UACE,MAAMC,QAAQ,GAAG,IAAIP,IAAI,CAACK,GAAL,CAASG,QAAb,CACjBnC,QAAQ,CAACoC,GADQ,EAEjBP,mBAAmB,CAACQ,OAFH,CAAjB;UAKFzB,QAAQ,CACNP,cAAc,CAAC;YACbiC,OAAO,EAAEtB,QAAQ,CAAC,CAAD,CADJ;YAEbkB,QAAQ,EAAEA,QAFG;YAGbP,IAAI,EAAEA;UAHO,CAAD,CADR,CAAR,CAPuB,CAevB;;UAEAV,MAAM,CAACC,QAAP,CAAgBqB,EAAhB,CAAmB,iBAAnB,EAAuCvB,QAAD,IAAc;YAClDJ,QAAQ,CAAC4B,aAAa,CAACxB,QAAQ,CAAC,CAAD,CAAT,CAAd,CAAR;UACD,CAFD;UAIAC,MAAM,CAACC,QAAP,CAAgBqB,EAAhB,CAAmB,cAAnB,EAAmC,MAAM;YACvCtB,MAAM,CAACwB,QAAP,CAAgBC,MAAhB;UACD,CAFD,EArBuB,CAwBvB;QACD,CAzBD,MAyBO;UACL9B,QAAQ,CAACL,aAAa,CAAC,4BAAD,CAAd,CAAR;QACD;MACF,CAxCD,CAwCE,OAAOc,GAAP,EAAY;QACZT,QAAQ,CAACL,aAAa,CAAC,uBAAD,CAAd,CAAR;MACD;IACF,CA7CD,MA6CO;MACLK,QAAQ,CAACL,aAAa,CAAC,mBAAD,CAAd,CAAR;IACD;EACF,CAlDD;AAmDD,CApDM;AAsDP,OAAO,MAAMiC,aAAa,GAAIF,OAAD,IAAa;EACxC,OAAO,MAAO1B,QAAP,IAAoB;IACzBA,QAAQ,CAACJ,oBAAoB,CAAC;MAAE8B,OAAO,EAAEA;IAAX,CAAD,CAArB,CAAR;IACA1B,QAAQ,CAACV,SAAS,CAACoC,OAAD,CAAV,CAAR;EACD,CAHD;AAID,CALM"},"metadata":{},"sourceType":"module"}