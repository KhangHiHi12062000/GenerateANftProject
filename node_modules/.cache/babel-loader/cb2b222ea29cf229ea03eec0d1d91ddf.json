{"ast":null,"code":"// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\n\nexport const getOwner = (_owner, _id) => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let allLips = await store.getState().blockchain.lipToken.methods.getLips().call();\n      let allOwnerLips = await store.getState().blockchain.lipToken.methods.getOwnerLips(account).call();\n\n      let _owner = await store.getState().blockchain.lipToken.methods.ownerOf(allLips[10].id).call();\n\n      dispatch(fetchDataSuccess({\n        allLips,\n        allOwnerLips,\n        _owner\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\nexport const fetchData = account => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let allLips = await store.getState().blockchain.lipToken.methods.getLips().call();\n      let allOwnerLips = await store.getState().blockchain.lipToken.methods.getOwnerLips(account).call();\n      let owner = await store.getState().blockchain.lipToken.methods.ownerOf(allLips[10].id).call();\n      dispatch(fetchDataSuccess({\n        allLips,\n        allOwnerLips,\n        owner\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};","map":{"version":3,"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","getOwner","_owner","_id","dispatch","allLips","getState","blockchain","lipToken","methods","getLips","call","allOwnerLips","getOwnerLips","account","ownerOf","id","err","console","log","fetchData","owner"],"sources":["/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/data/dataActions.js"],"sourcesContent":["// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const getOwner = (_owner,_id) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let allLips = await store\n        .getState()\n        .blockchain.lipToken.methods.getLips()\n        .call();\n\n      let allOwnerLips = await store\n        .getState()\n        .blockchain.lipToken.methods.getOwnerLips(account)\n        .call();\n\n      let _owner  = await store\n      .getState()\n      .blockchain.lipToken.methods.ownerOf(allLips[10].id)\n      .call();\n\n      dispatch(\n        fetchDataSuccess({\n          allLips,\n          allOwnerLips,\n          _owner,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n}\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let allLips = await store\n        .getState()\n        .blockchain.lipToken.methods.getLips()\n        .call();\n\n      let allOwnerLips = await store\n        .getState()\n        .blockchain.lipToken.methods.getOwnerLips(account)\n        .call();\n\n      let owner  = await store\n      .getState()\n      .blockchain.lipToken.methods.ownerOf(allLips[10].id)\n      .call();\n\n\n      dispatch(\n        fetchDataSuccess({\n          allLips,\n          allOwnerLips,\n          owner,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;EAC7B,OAAO;IACLC,IAAI,EAAE;EADD,CAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;EACpC,OAAO;IACLF,IAAI,EAAE,oBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,MAAMC,eAAe,GAAID,OAAD,IAAa;EACnC,OAAO;IACLF,IAAI,EAAE,mBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,OAAO,MAAME,QAAQ,GAAG,CAACC,MAAD,EAAQC,GAAR,KAAgB;EACtC,OAAO,MAAOC,QAAP,IAAoB;IACzBA,QAAQ,CAACR,gBAAgB,EAAjB,CAAR;;IACA,IAAI;MACF,IAAIS,OAAO,GAAG,MAAMV,KAAK,CACtBW,QADiB,GAEjBC,UAFiB,CAENC,QAFM,CAEGC,OAFH,CAEWC,OAFX,GAGjBC,IAHiB,EAApB;MAKA,IAAIC,YAAY,GAAG,MAAMjB,KAAK,CAC3BW,QADsB,GAEtBC,UAFsB,CAEXC,QAFW,CAEFC,OAFE,CAEMI,YAFN,CAEmBC,OAFnB,EAGtBH,IAHsB,EAAzB;;MAKA,IAAIT,MAAM,GAAI,MAAMP,KAAK,CACxBW,QADmB,GAEnBC,UAFmB,CAERC,QAFQ,CAECC,OAFD,CAESM,OAFT,CAEiBV,OAAO,CAAC,EAAD,CAAP,CAAYW,EAF7B,EAGnBL,IAHmB,EAApB;;MAKAP,QAAQ,CACNN,gBAAgB,CAAC;QACfO,OADe;QAEfO,YAFe;QAGfV;MAHe,CAAD,CADV,CAAR;IAOD,CAvBD,CAuBE,OAAOe,GAAP,EAAY;MACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACAb,QAAQ,CAACJ,eAAe,CAAC,oCAAD,CAAhB,CAAR;IACD;EACF,CA7BD;AA8BD,CA/BM;AAiCP,OAAO,MAAMoB,SAAS,GAAIN,OAAD,IAAa;EACpC,OAAO,MAAOV,QAAP,IAAoB;IACzBA,QAAQ,CAACR,gBAAgB,EAAjB,CAAR;;IACA,IAAI;MACF,IAAIS,OAAO,GAAG,MAAMV,KAAK,CACtBW,QADiB,GAEjBC,UAFiB,CAENC,QAFM,CAEGC,OAFH,CAEWC,OAFX,GAGjBC,IAHiB,EAApB;MAKA,IAAIC,YAAY,GAAG,MAAMjB,KAAK,CAC3BW,QADsB,GAEtBC,UAFsB,CAEXC,QAFW,CAEFC,OAFE,CAEMI,YAFN,CAEmBC,OAFnB,EAGtBH,IAHsB,EAAzB;MAKA,IAAIU,KAAK,GAAI,MAAM1B,KAAK,CACvBW,QADkB,GAElBC,UAFkB,CAEPC,QAFO,CAEEC,OAFF,CAEUM,OAFV,CAEkBV,OAAO,CAAC,EAAD,CAAP,CAAYW,EAF9B,EAGlBL,IAHkB,EAAnB;MAMAP,QAAQ,CACNN,gBAAgB,CAAC;QACfO,OADe;QAEfO,YAFe;QAGfS;MAHe,CAAD,CADV,CAAR;IAOD,CAxBD,CAwBE,OAAOJ,GAAP,EAAY;MACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACAb,QAAQ,CAACJ,eAAe,CAAC,oCAAD,CAAhB,CAAR;IACD;EACF,CA9BD;AA+BD,CAhCM"},"metadata":{},"sourceType":"module"}