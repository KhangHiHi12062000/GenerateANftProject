{"ast":null,"code":"// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\n\nexport const getOwner = _id => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let owner = await store.getState().blockchain.lipToken.methods.ownerOf(_id).call();\n      console.log(\"Hello\");\n      console.log(owner);\n      dispatch(fetchDataSuccess({\n        allLips,\n        allOwnerLips,\n        owner\n      }));\n    } catch (error) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\nexport const fetchData = account => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let allLips = await store.getState().blockchain.lipToken.methods.getLips().call();\n      let allOwnerLips = await store.getState().blockchain.lipToken.methods.getOwnerLips(account).call();\n      let owner = await store.getState().blockchain.lipToken.methods.ownerOf(allLips[10].id).call();\n      dispatch(fetchDataSuccess({\n        allLips,\n        allOwnerLips,\n        owner\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};","map":{"version":3,"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","getOwner","_id","dispatch","owner","getState","blockchain","lipToken","methods","ownerOf","call","console","log","allLips","allOwnerLips","error","err","fetchData","account","getLips","getOwnerLips","id"],"sources":["/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/data/dataActions.js"],"sourcesContent":["// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const getOwner = (_id) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let owner = await store\n      .getState()\n      .blockchain.lipToken.methods.ownerOf(_id)\n      .call();\n      console.log(\"Hello\");\n      console.log(owner);\n      dispatch(\n        fetchDataSuccess({\n          allLips,\n          allOwnerLips,\n          owner,\n        })\n      );\n    } catch (error) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  }\n}\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let allLips = await store\n        .getState()\n        .blockchain.lipToken.methods.getLips()\n        .call();\n\n      let allOwnerLips = await store\n        .getState()\n        .blockchain.lipToken.methods.getOwnerLips(account)\n        .call();\n\n      let owner  = await store\n      .getState()\n      .blockchain.lipToken.methods.ownerOf(allLips[10].id)\n      .call();\n\n      dispatch(\n        fetchDataSuccess({\n          allLips,\n          allOwnerLips,\n          owner,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;EAC7B,OAAO;IACLC,IAAI,EAAE;EADD,CAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;EACpC,OAAO;IACLF,IAAI,EAAE,oBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,MAAMC,eAAe,GAAID,OAAD,IAAa;EACnC,OAAO;IACLF,IAAI,EAAE,mBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,OAAO,MAAME,QAAQ,GAAIC,GAAD,IAAS;EAC/B,OAAO,MAAOC,QAAP,IAAoB;IACzBA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;;IACA,IAAI;MACF,IAAIQ,KAAK,GAAG,MAAMT,KAAK,CACtBU,QADiB,GAEjBC,UAFiB,CAENC,QAFM,CAEGC,OAFH,CAEWC,OAFX,CAEmBP,GAFnB,EAGjBQ,IAHiB,EAAlB;MAIAC,OAAO,CAACC,GAAR,CAAY,OAAZ;MACAD,OAAO,CAACC,GAAR,CAAYR,KAAZ;MACAD,QAAQ,CACNL,gBAAgB,CAAC;QACfe,OADe;QAEfC,YAFe;QAGfV;MAHe,CAAD,CADV,CAAR;IAOD,CAdD,CAcE,OAAOW,KAAP,EAAc;MACdJ,OAAO,CAACC,GAAR,CAAYI,GAAZ;MACAb,QAAQ,CAACH,eAAe,CAAC,oCAAD,CAAhB,CAAR;IACD;EACF,CApBD;AAqBD,CAtBM;AAwBP,OAAO,MAAMiB,SAAS,GAAIC,OAAD,IAAa;EACpC,OAAO,MAAOf,QAAP,IAAoB;IACzBA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;;IACA,IAAI;MACF,IAAIiB,OAAO,GAAG,MAAMlB,KAAK,CACtBU,QADiB,GAEjBC,UAFiB,CAENC,QAFM,CAEGC,OAFH,CAEWW,OAFX,GAGjBT,IAHiB,EAApB;MAKA,IAAII,YAAY,GAAG,MAAMnB,KAAK,CAC3BU,QADsB,GAEtBC,UAFsB,CAEXC,QAFW,CAEFC,OAFE,CAEMY,YAFN,CAEmBF,OAFnB,EAGtBR,IAHsB,EAAzB;MAKA,IAAIN,KAAK,GAAI,MAAMT,KAAK,CACvBU,QADkB,GAElBC,UAFkB,CAEPC,QAFO,CAEEC,OAFF,CAEUC,OAFV,CAEkBI,OAAO,CAAC,EAAD,CAAP,CAAYQ,EAF9B,EAGlBX,IAHkB,EAAnB;MAKAP,QAAQ,CACNL,gBAAgB,CAAC;QACfe,OADe;QAEfC,YAFe;QAGfV;MAHe,CAAD,CADV,CAAR;IAOD,CAvBD,CAuBE,OAAOY,GAAP,EAAY;MACZL,OAAO,CAACC,GAAR,CAAYI,GAAZ;MACAb,QAAQ,CAACH,eAAe,CAAC,oCAAD,CAAhB,CAAR;IACD;EACF,CA7BD;AA8BD,CA/BM"},"metadata":{},"sourceType":"module"}