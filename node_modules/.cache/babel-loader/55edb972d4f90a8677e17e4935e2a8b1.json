{"ast":null,"code":"// constants\nimport Web3 from \"web3\";\nimport LipToken from \"../../contracts/LipToken.json\"; // log\n\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\"\n  };\n};\n\nconst connectSuccess = payload => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst connectFailed = payload => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload\n  };\n};\n\nconst updateAccountRequest = payload => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload\n  };\n};\n\nexport const sendTransacsion = (_acount, _to) => {\n  return async dispatch => {\n    try {\n      let params = [{\n        \"from\": _acount,\n        \"to\": _to,\n        \"gas\": Number(30000).toString(16),\n        \"gasPrice\": Number(250000000).toString(16),\n        \"value\": Number(10000000000000000000).toString(16)\n      }];\n      const accounts = await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\nexport const getOwner = (_owner, _id) => {\n  return async dispatch => {\n    try {\n      _owner = blockchain.lipToken.methods.ownerOf(10).call();\n      console.log(_owner);\n    } catch (error) {\n      console.logog(error);\n    }\n  };\n};\n\nconst getOwnerRequest = payload => {\n  return {\n    type: \"OWNER\",\n    payload: payload\n  };\n};\n\nconst sendTransacsionRequest = payload => {\n  return {\n    type: \"SEND\",\n    payload: payload\n  };\n};\n\nexport const connect = () => {\n  return async dispatch => {\n    dispatch(connectRequest());\n\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\"\n        });\n        console.log(networkId);\n        const lipTokenNetworkData = await LipToken.networks[networkId];\n\n        if (lipTokenNetworkData) {\n          console.log(web3.eth.getAccounts());\n          const lipToken = new web3.eth.Contract(LipToken.abi, lipTokenNetworkData.address);\n          dispatch(connectSuccess({\n            account: accounts[0],\n            lipToken: lipToken,\n            web3: web3\n          })); // Add listeners start\n\n          window.ethereum.on(\"accountsChanged\", accounts => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          }); // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Polygon.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\nexport const updateAccount = account => {\n  return async dispatch => {\n    dispatch(updateAccountRequest({\n      account: account\n    }));\n    dispatch(fetchData(account));\n  };\n};","map":{"version":3,"names":["Web3","LipToken","fetchData","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","sendTransacsion","_acount","_to","dispatch","params","Number","toString","accounts","window","ethereum","request","method","err","console","log","getOwner","_owner","_id","blockchain","lipToken","methods","ownerOf","call","error","logog","getOwnerRequest","sendTransacsionRequest","connect","web3","networkId","lipTokenNetworkData","networks","eth","getAccounts","Contract","abi","address","account","on","updateAccount","location","reload"],"sources":["/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/blockchain/blockchainActions.js"],"sourcesContent":["// constants\nimport Web3 from \"web3\";\nimport LipToken from \"../../contracts/LipToken.json\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const sendTransacsion = (_acount, _to) =>{\n  return async (dispatch) => {\n      try {\n        let params = [{\n          \"from\":_acount,\n          \"to\":_to,\n          \"gas\": Number(30000).toString(16),\n          \"gasPrice\":Number(250000000).toString(16),\n          \"value\":Number(10000000000000000000).toString(16),\n        }];\n\n        const accounts = await window.ethereum.request({\n          method: \"eth_sendTransaction\", params\n        });\n      } catch (err) {\n        console.log(err);        \n      }\n\n};\n};\nexport const getOwner = (_owner,_id) => {\n  return async (dispatch) => {\n    try {\n      _owner = blockchain.lipToken.methods.ownerOf(10)\n      .call();\n      console.log(_owner);\n    } catch (error) {\n      console.logog(error);\n    }\n  }\n}\nconst getOwnerRequest = (payload) => {\n  return{\n    type: \"OWNER\",\n    payload: payload,\n  };\n};\nconst sendTransacsionRequest = (payload) => {\n  return{\n    type: \"SEND\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\",\n        });\n        console.log(networkId);\n        const lipTokenNetworkData = await LipToken.networks[networkId];\n        if (lipTokenNetworkData) {\n          console.log(web3.eth.getAccounts());\n\n          const lipToken = new web3.eth.Contract(\n            LipToken.abi,\n            lipTokenNetworkData.address\n          );\n          \n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              lipToken: lipToken,\n              web3: web3,\n            })\n          );\n\n          // Add listeners start\n          \n          window.ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Polygon.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}