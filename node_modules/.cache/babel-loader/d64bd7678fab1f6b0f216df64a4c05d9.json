{"ast":null,"code":"// constants\nimport Web3 from \"web3\";\nimport LipToken from \"../../contracts/LipToken.json\"; // log\n\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\"\n  };\n};\n\nconst connectSuccess = payload => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst connectFailed = payload => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload\n  };\n};\n\nconst updateAccountRequest = payload => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload\n  };\n};\n\nexport const connect = () => {\n  return async dispatch => {\n    dispatch(connectRequest());\n\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\"\n        });\n        console.log(networkId);\n        const lipTokenNetworkData = await LipToken.networks[networkId];\n\n        if (lipTokenNetworkData) {\n          const lipToken = new web3.eth.Contract(LipToken.abi, lipTokenNetworkData.address);\n          dispatch(connectSuccess({\n            account: accounts[0],\n            lipToken: lipToken,\n            web3: web3\n          })); // Add listeners start\n\n          console.log(\"This is accont :\" + accounts[0]);\n          console.log(lipToken);\n          window.ethereum.on(\"accountsChanged\", accounts => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          }); // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Polygon.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\nexport const updateAccount = account => {\n  return async dispatch => {\n    dispatch(updateAccountRequest({\n      account: account\n    }));\n    dispatch(fetchData(account));\n  };\n};","map":{"version":3,"names":["Web3","LipToken","fetchData","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","dispatch","window","ethereum","web3","accounts","request","method","networkId","console","log","lipTokenNetworkData","networks","lipToken","eth","Contract","abi","address","account","on","updateAccount","location","reload","err"],"sources":["/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/blockchain/blockchainActions.js"],"sourcesContent":["// constants\nimport Web3 from \"web3\";\nimport LipToken from \"../../contracts/LipToken.json\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\",\n        });\n        console.log(networkId);\n        const lipTokenNetworkData = await LipToken.networks[networkId];\n        if (lipTokenNetworkData) {\n          const lipToken = new web3.eth.Contract(\n            LipToken.abi,\n            lipTokenNetworkData.address\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              lipToken: lipToken,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          console.log(\"This is accont :\"+accounts[0]);\n          console.log(lipToken);\n          window.ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Polygon.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}