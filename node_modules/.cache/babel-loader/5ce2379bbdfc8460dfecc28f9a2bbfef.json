{"ast":null,"code":"// constants\nimport Web3 from \"web3\";\nimport LipToken from \"../../contracts/LipToken.json\"; // log\n\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\"\n  };\n};\n\nconst connectSuccess = payload => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst connectFailed = payload => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload\n  };\n};\n\nconst updateAccountRequest = payload => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload\n  };\n};\n\nexport const sendTransacsion = (_acount, _to) => {\n  return async dispatch => {\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n\n      try {\n        const params = [{\n          \"from\": _acount,\n          \"to\": _to,\n          \"gas\": Number(30000).toString(16),\n          \"gasPrice\": Number(250000).toString(16),\n          \"value\": Number(100000000000000).toString\n        }];\n        const accounts = await window.ethereum.request({\n          method: \"eth_sendTransaction\",\n          params\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n\n    ;\n  };\n};\n\nconst sendTransacsionRequest = payload => {\n  return {\n    type: \"SEND\",\n    payload: payload\n  };\n};\n\nexport const connect = () => {\n  return async dispatch => {\n    dispatch(connectRequest());\n\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_accounts\"\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\"\n        });\n        console.log(networkId);\n        const lipTokenNetworkData = await LipToken.networks[networkId];\n\n        if (lipTokenNetworkData) {\n          const lipToken = new web3.eth.Contract(LipToken.abi, lipTokenNetworkData.address);\n          dispatch(connectSuccess({\n            account: accounts[0],\n            lipToken: lipToken,\n            web3: web3\n          })); // Add listeners start\n\n          window.ethereum.on(\"accountsChanged\", accounts => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          }); // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Polygon.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\nexport const updateAccount = account => {\n  return async dispatch => {\n    dispatch(updateAccountRequest({\n      account: account\n    }));\n    dispatch(fetchData(account));\n  };\n};","map":{"version":3,"names":["Web3","LipToken","fetchData","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","sendTransacsion","_acount","_to","dispatch","window","ethereum","web3","params","Number","toString","accounts","request","method","err","console","log","sendTransacsionRequest","connect","networkId","lipTokenNetworkData","networks","lipToken","eth","Contract","abi","address","account","on","updateAccount","location","reload"],"sources":["/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/blockchain/blockchainActions.js"],"sourcesContent":["// constants\nimport Web3 from \"web3\";\nimport LipToken from \"../../contracts/LipToken.json\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const sendTransacsion = (_acount, _to) =>{\n  return async (dispatch) => {\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n      try {\n        const params = [{\n          \"from\":_acount,\n          \"to\":_to,\n          \"gas\": Number(30000).toString(16),\n          \"gasPrice\":Number(250000).toString(16),\n          \"value\":Number(100000000000000).toString,\n        }]\n\n        const accounts = await window.ethereum.request({\n          method: \"eth_sendTransaction\", params\n        });\n      } catch (err) {\n        console.log(err);        \n      }\n  }else {\n    dispatch(connectFailed(\"Install Metamask.\"));\n  };\n\n};\n};\n\nconst sendTransacsionRequest = (payload) => {\n  return{\n    type: \"SEND\",\n    payload: payload,\n  };\n};\n\n\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\",\n        });\n        console.log(networkId);\n        const lipTokenNetworkData = await LipToken.networks[networkId];\n        if (lipTokenNetworkData) {\n          const lipToken = new web3.eth.Contract(\n            LipToken.abi,\n            lipTokenNetworkData.address\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              lipToken: lipToken,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          window.ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Polygon.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"],"mappings":"AAAA;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,+BAArB,C,CACA;;AACA,SAASC,SAAT,QAA0B,qBAA1B;;AAEA,MAAMC,cAAc,GAAG,MAAM;EAC3B,OAAO;IACLC,IAAI,EAAE;EADD,CAAP;AAGD,CAJD;;AAMA,MAAMC,cAAc,GAAIC,OAAD,IAAa;EAClC,OAAO;IACLF,IAAI,EAAE,oBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,MAAMC,aAAa,GAAID,OAAD,IAAa;EACjC,OAAO;IACLF,IAAI,EAAE,mBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,MAAME,oBAAoB,GAAIF,OAAD,IAAa;EACxC,OAAO;IACLF,IAAI,EAAE,gBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,OAAO,MAAMG,eAAe,GAAG,CAACC,OAAD,EAAUC,GAAV,KAAiB;EAC9C,OAAO,MAAOC,QAAP,IAAoB;IACzB,IAAIC,MAAM,CAACC,QAAX,EAAqB;MACnB,IAAIC,IAAI,GAAG,IAAIf,IAAJ,CAASa,MAAM,CAACC,QAAhB,CAAX;;MACA,IAAI;QACF,MAAME,MAAM,GAAG,CAAC;UACd,QAAON,OADO;UAEd,MAAKC,GAFS;UAGd,OAAOM,MAAM,CAAC,KAAD,CAAN,CAAcC,QAAd,CAAuB,EAAvB,CAHO;UAId,YAAWD,MAAM,CAAC,MAAD,CAAN,CAAeC,QAAf,CAAwB,EAAxB,CAJG;UAKd,SAAQD,MAAM,CAAC,eAAD,CAAN,CAAwBC;QALlB,CAAD,CAAf;QAQA,MAAMC,QAAQ,GAAG,MAAMN,MAAM,CAACC,QAAP,CAAgBM,OAAhB,CAAwB;UAC7CC,MAAM,EAAE,qBADqC;UACdL;QADc,CAAxB,CAAvB;MAGD,CAZD,CAYE,OAAOM,GAAP,EAAY;QACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACD;IACJ,CAjBC,MAiBI;MACJV,QAAQ,CAACL,aAAa,CAAC,mBAAD,CAAd,CAAR;IACD;;IAAA;EAEF,CAtBC;AAuBD,CAxBM;;AA0BP,MAAMkB,sBAAsB,GAAInB,OAAD,IAAa;EAC1C,OAAM;IACJF,IAAI,EAAE,MADF;IAEJE,OAAO,EAAEA;EAFL,CAAN;AAID,CALD;;AASA,OAAO,MAAMoB,OAAO,GAAG,MAAM;EAC3B,OAAO,MAAOd,QAAP,IAAoB;IACzBA,QAAQ,CAACT,cAAc,EAAf,CAAR;;IACA,IAAIU,MAAM,CAACC,QAAX,EAAqB;MACnB,IAAIC,IAAI,GAAG,IAAIf,IAAJ,CAASa,MAAM,CAACC,QAAhB,CAAX;;MACA,IAAI;QACF,MAAMK,QAAQ,GAAG,MAAMN,MAAM,CAACC,QAAP,CAAgBM,OAAhB,CAAwB;UAC7CC,MAAM,EAAE;QADqC,CAAxB,CAAvB;QAGA,MAAMM,SAAS,GAAG,MAAMd,MAAM,CAACC,QAAP,CAAgBM,OAAhB,CAAwB;UAC9CC,MAAM,EAAE;QADsC,CAAxB,CAAxB;QAGAE,OAAO,CAACC,GAAR,CAAYG,SAAZ;QACA,MAAMC,mBAAmB,GAAG,MAAM3B,QAAQ,CAAC4B,QAAT,CAAkBF,SAAlB,CAAlC;;QACA,IAAIC,mBAAJ,EAAyB;UACvB,MAAME,QAAQ,GAAG,IAAIf,IAAI,CAACgB,GAAL,CAASC,QAAb,CACf/B,QAAQ,CAACgC,GADM,EAEfL,mBAAmB,CAACM,OAFL,CAAjB;UAIAtB,QAAQ,CACNP,cAAc,CAAC;YACb8B,OAAO,EAAEhB,QAAQ,CAAC,CAAD,CADJ;YAEbW,QAAQ,EAAEA,QAFG;YAGbf,IAAI,EAAEA;UAHO,CAAD,CADR,CAAR,CALuB,CAYvB;;UACAF,MAAM,CAACC,QAAP,CAAgBsB,EAAhB,CAAmB,iBAAnB,EAAuCjB,QAAD,IAAc;YAClDP,QAAQ,CAACyB,aAAa,CAAClB,QAAQ,CAAC,CAAD,CAAT,CAAd,CAAR;UACD,CAFD;UAGAN,MAAM,CAACC,QAAP,CAAgBsB,EAAhB,CAAmB,cAAnB,EAAmC,MAAM;YACvCvB,MAAM,CAACyB,QAAP,CAAgBC,MAAhB;UACD,CAFD,EAhBuB,CAmBvB;QACD,CApBD,MAoBO;UACL3B,QAAQ,CAACL,aAAa,CAAC,4BAAD,CAAd,CAAR;QACD;MACF,CAhCD,CAgCE,OAAOe,GAAP,EAAY;QACZV,QAAQ,CAACL,aAAa,CAAC,uBAAD,CAAd,CAAR;MACD;IACF,CArCD,MAqCO;MACLK,QAAQ,CAACL,aAAa,CAAC,mBAAD,CAAd,CAAR;IACD;EACF,CA1CD;AA2CD,CA5CM;AA8CP,OAAO,MAAM8B,aAAa,GAAIF,OAAD,IAAa;EACxC,OAAO,MAAOvB,QAAP,IAAoB;IACzBA,QAAQ,CAACJ,oBAAoB,CAAC;MAAE2B,OAAO,EAAEA;IAAX,CAAD,CAArB,CAAR;IACAvB,QAAQ,CAACV,SAAS,CAACiC,OAAD,CAAV,CAAR;EACD,CAHD;AAID,CALM"},"metadata":{},"sourceType":"module"}