{"ast":null,"code":"// log\nimport store from \"../store\";\nimport Web3 from \"web3\";\nimport LipToken from \"../../contracts/LipToken.json\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\n\nconst getOwnerRequest = payload => {\n  return {\n    type: \"OWNER\",\n    payload: payload\n  };\n};\n\nexport const getOwner = async _id => {\n  const web3 = new Web3(window.ethereum);\n  const networkId = await window.ethereum.request({\n    method: \"net_version\"\n  });\n  const lipTokenNetworkData = await LipToken.networks[networkId];\n\n  if (lipTokenNetworkData) {\n    const contract = await new web3.eth.Contract(LipToken.abi, lipTokenNetworkData.address);\n    let approvedLips = [];\n    let allLips = await store.getState().blockchain.lipToken.methods.getLips().call();\n    allLips.forEach(async element => {\n      await store.getState().blockchain.nftTrader.methods.listings(\"0x3Fa44A7a2820590690c56f3d30252bC2CC1D8024\", element.id).call().then(result => {\n        if (result.price !== \"0\") {\n          approvedLips.push(element);\n        }\n      });\n    });\n    return owner;\n  }\n};\nexport const getListing = async _id => {\n  const web3 = new Web3(window.ethereum);\n  const networkId = await window.ethereum.request({\n    method: \"net_version\"\n  });\n  const lipTokenNetworkData = await LipToken.networks[networkId];\n\n  if (lipTokenNetworkData) {\n    const contract = await new web3.eth.Contract(LipToken.abi, lipTokenNetworkData.address);\n    const owner = await contract.methods.ownerOf(_id).call();\n    return owner;\n  }\n};\nexport const fetchData = account => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let allLips = await store.getState().blockchain.lipToken.methods.getLips().call();\n      let allOwnerLips = await store.getState().blockchain.lipToken.methods.getOwnerLips(account).call();\n      let approvedLips = [];\n      allLips.forEach(async element => {\n        await store.getState().blockchain.nftTrader.methods.listings(\"0x3Fa44A7a2820590690c56f3d30252bC2CC1D8024\", element.id).call().then(result => {\n          if (result.price !== \"0\") {\n            approvedLips.push(element);\n          }\n        });\n      });\n      dispatch(fetchDataSuccess({\n        allLips,\n        allOwnerLips,\n        approvedLips\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};","map":{"version":3,"names":["store","Web3","LipToken","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","getOwnerRequest","getOwner","_id","web3","window","ethereum","networkId","request","method","lipTokenNetworkData","networks","contract","eth","Contract","abi","address","approvedLips","allLips","getState","blockchain","lipToken","methods","getLips","call","forEach","element","nftTrader","listings","id","then","result","price","push","owner","getListing","ownerOf","fetchData","account","dispatch","allOwnerLips","getOwnerLips","err","console","log"],"sources":["/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/data/dataActions.js"],"sourcesContent":["// log\nimport store from \"../store\";\nimport Web3 from \"web3\";\nimport LipToken from \"../../contracts/LipToken.json\";\n\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\nconst getOwnerRequest = (payload) => {\n  return {\n    type: \"OWNER\",\n    payload: payload,\n  };\n};\n\nexport const getOwner = async (_id) => {\n      const web3 = new Web3(window.ethereum);\n      const networkId = await window.ethereum.request({\n        method: \"net_version\",\n      });\n      const lipTokenNetworkData = await LipToken.networks[networkId];\n      if (lipTokenNetworkData) {\n      const contract = await new web3.eth.Contract(\n        LipToken.abi,\n        lipTokenNetworkData.address);\n        let approvedLips = [];\n        let allLips = await store\n        .getState()\n        .blockchain.lipToken.methods.getLips()\n        .call();\n        allLips.forEach( async (element) => {\n          await store\n          .getState()\n          .blockchain.nftTrader.methods.listings(\"0x3Fa44A7a2820590690c56f3d30252bC2CC1D8024\",element.id)\n          .call().then((result)=>{\n            if(result.price !== \"0\"){ approvedLips.push(element)}\n          });\n        });\n      return owner;\n      }\n      \n}\n\nexport const getListing = async (_id) => {\n  const web3 = new Web3(window.ethereum);\n  const networkId = await window.ethereum.request({\n    method: \"net_version\",\n  });\n  const lipTokenNetworkData = await LipToken.networks[networkId];\n  if (lipTokenNetworkData) {\n  const contract = await new web3.eth.Contract(\n    LipToken.abi,\n    lipTokenNetworkData.address);\n  const owner = await contract.methods.ownerOf(_id).call();\n  return owner;\n  }\n  \n}\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let allLips = await store\n        .getState()\n        .blockchain.lipToken.methods.getLips()\n        .call();\n\n      let allOwnerLips = await store\n        .getState()\n        .blockchain.lipToken.methods.getOwnerLips(account)\n        .call();\n      let approvedLips = [];\n      allLips.forEach( async (element) => {\n        await store\n        .getState()\n        .blockchain.nftTrader.methods.listings(\"0x3Fa44A7a2820590690c56f3d30252bC2CC1D8024\",element.id)\n        .call().then((result)=>{\n          if(result.price !== \"0\"){ approvedLips.push(element)}\n        });\n      });\n\n      dispatch(\n        fetchDataSuccess({\n          allLips,\n          allOwnerLips,\n          approvedLips,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}