{"ast":null,"code":"// log\nimport store from \"../store\";\nimport Web3 from \"web3\";\nimport LipToken from \"../../contracts/LipToken.json\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\n\nconst getOwnerRequest = payload => {\n  return {\n    type: \"OWNER\",\n    payload: payload\n  };\n};\n\nexport const getOwner = _id => {\n  // const web3 = new Web3(window.ethereum);\n  // const networkId = await window.ethereum.request({\n  //   method: \"net_version\",\n  // });\n  // const lipTokenNetworkData = await LipToken.networks[networkId];\n  // if (lipTokenNetworkData) {\n  // const contract = await new web3.eth.Contract(\n  //   LipToken.abi,\n  //   lipTokenNetworkData.address);\n  // const owner = await contract.methods.ownerOf(_id).call();\n  // return owner;\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      const web3 = new Web3(window.ethereum);\n      const networkId = await window.ethereum.request({\n        method: \"net_version\"\n      });\n      const lipTokenNetworkData = await LipToken.networks[networkId];\n\n      if (lipTokenNetworkData) {\n        const contract = await new web3.eth.Contract(LipToken.abi, lipTokenNetworkData.address);\n        const owner = await contract.methods.ownerOf(_id).call(); //return owner;\n\n        dispatch(fetchDataSuccess({\n          allLips,\n          allOwnerLips,\n          owner\n        }));\n      }\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\nexport const fetchData = account => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let allLips = await store.getState().blockchain.lipToken.methods.getLips().call();\n      let allOwnerLips = await store.getState().blockchain.lipToken.methods.getOwnerLips(account).call();\n      let owner = await store.getState().blockchain.lipToken.methods.ownerOf(allLips[10].id).call();\n      dispatch(fetchDataSuccess({\n        allLips,\n        allOwnerLips,\n        owner\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};","map":{"version":3,"names":["store","Web3","LipToken","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","getOwnerRequest","getOwner","_id","dispatch","web3","window","ethereum","networkId","request","method","lipTokenNetworkData","networks","contract","eth","Contract","abi","address","owner","methods","ownerOf","call","allLips","allOwnerLips","err","console","log","fetchData","account","getState","blockchain","lipToken","getLips","getOwnerLips","id"],"sources":["/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/data/dataActions.js"],"sourcesContent":["// log\nimport store from \"../store\";\nimport Web3 from \"web3\";\nimport LipToken from \"../../contracts/LipToken.json\";\n\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\nconst getOwnerRequest = (payload) => {\n  return {\n    type: \"OWNER\",\n    payload: payload,\n  };\n};\n\nexport const getOwner = (_id) => {\n      // const web3 = new Web3(window.ethereum);\n      // const networkId = await window.ethereum.request({\n      //   method: \"net_version\",\n      // });\n      // const lipTokenNetworkData = await LipToken.networks[networkId];\n      // if (lipTokenNetworkData) {\n      // const contract = await new web3.eth.Contract(\n      //   LipToken.abi,\n      //   lipTokenNetworkData.address);\n      // const owner = await contract.methods.ownerOf(_id).call();\n      // return owner;\n      return async (dispatch) => {\n        dispatch(fetchDataRequest());\n        try {\n          const web3 = new Web3(window.ethereum);\n        const networkId = await window.ethereum.request({\n        method: \"net_version\",\n        });\n        const lipTokenNetworkData = await LipToken.networks[networkId];\n        if (lipTokenNetworkData) {\n        const contract = await new web3.eth.Contract(\n        LipToken.abi,\n        lipTokenNetworkData.address);\n        const owner = await contract.methods.ownerOf(_id).call();\n        //return owner;\n          dispatch(\n            fetchDataSuccess({\n              allLips,\n              allOwnerLips,\n              owner,\n            })\n          );\n        }\n       } catch (err) {\n          console.log(err);\n          dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n        }\n      };\n      \n    }\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let allLips = await store\n        .getState()\n        .blockchain.lipToken.methods.getLips()\n        .call();\n\n      let allOwnerLips = await store\n        .getState()\n        .blockchain.lipToken.methods.getOwnerLips(account)\n        .call();\n\n      let owner  = await store\n      .getState()\n      .blockchain.lipToken.methods.ownerOf(allLips[10].id)\n      .call();\n\n      dispatch(\n        fetchDataSuccess({\n          allLips,\n          allOwnerLips,\n          owner,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}