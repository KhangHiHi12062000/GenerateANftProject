{"ast":null,"code":"// log\nimport store from \"../store\";\nimport Web3 from \"web3\";\nimport LipToken from \"../../contracts/LipToken.json\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\n\nconst getOwnerRequest = payload => {\n  return {\n    type: \"OWNER\",\n    payload: payload\n  };\n};\n\nexport const getOwner = _id => {\n  return async dispatch => {\n    console.log(owner);\n    const web3 = new Web3(window.ethereum);\n    const networkId = await window.ethereum.request({\n      method: \"net_version\"\n    });\n    const lipTokenNetworkData = await LipToken.networks[networkId];\n    const contract = await new web3.eth.Contract(LipToken.abi, lipTokenNetworkData.address);\n    const owner = await new contract.methods.ownerOf(_id).call();\n    console.log(owner);\n  };\n};\nexport const fetchData = account => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let allLips = await store.getState().blockchain.lipToken.methods.getLips().call();\n      let allOwnerLips = await store.getState().blockchain.lipToken.methods.getOwnerLips(account).call();\n      let owner = await store.getState().blockchain.lipToken.methods.ownerOf(allLips[10].id).call();\n      dispatch(fetchDataSuccess({\n        allLips,\n        allOwnerLips,\n        owner\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};","map":{"version":3,"names":["store","Web3","LipToken","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","getOwnerRequest","getOwner","_id","dispatch","console","log","owner","web3","window","ethereum","networkId","request","method","lipTokenNetworkData","networks","contract","eth","Contract","abi","address","methods","ownerOf","call","fetchData","account","allLips","getState","blockchain","lipToken","getLips","allOwnerLips","getOwnerLips","id","err"],"sources":["/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/data/dataActions.js"],"sourcesContent":["// log\nimport store from \"../store\";\nimport Web3 from \"web3\";\nimport LipToken from \"../../contracts/LipToken.json\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\nconst getOwnerRequest = (payload) => {\n  return {\n    type: \"OWNER\",\n    payload: payload,\n  };\n};\n\nexport const getOwner = (_id) => {\n  return async (dispatch) => {\n    console.log(owner)\n      const web3 = new Web3(window.ethereum);\n      const networkId = await window.ethereum.request({\n        method: \"net_version\",\n      });\n      const lipTokenNetworkData = await LipToken.networks[networkId];\n      const contract = await new web3.eth.Contract(\n        LipToken.abi,\n        lipTokenNetworkData.address);\n      const owner = await new contract.methods.ownerOf(_id).call();\n      console.log(owner)\n  }\n}\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let allLips = await store\n        .getState()\n        .blockchain.lipToken.methods.getLips()\n        .call();\n\n      let allOwnerLips = await store\n        .getState()\n        .blockchain.lipToken.methods.getOwnerLips(account)\n        .call();\n\n      let owner  = await store\n      .getState()\n      .blockchain.lipToken.methods.ownerOf(allLips[10].id)\n      .call();\n\n      dispatch(\n        fetchDataSuccess({\n          allLips,\n          allOwnerLips,\n          owner,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,+BAArB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;EAC7B,OAAO;IACLC,IAAI,EAAE;EADD,CAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;EACpC,OAAO;IACLF,IAAI,EAAE,oBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,MAAMC,eAAe,GAAID,OAAD,IAAa;EACnC,OAAO;IACLF,IAAI,EAAE,mBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAMA,MAAME,eAAe,GAAIF,OAAD,IAAa;EACnC,OAAO;IACLF,IAAI,EAAE,OADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,OAAO,MAAMG,QAAQ,GAAIC,GAAD,IAAS;EAC/B,OAAO,MAAOC,QAAP,IAAoB;IACzBC,OAAO,CAACC,GAAR,CAAYC,KAAZ;IACE,MAAMC,IAAI,GAAG,IAAId,IAAJ,CAASe,MAAM,CAACC,QAAhB,CAAb;IACA,MAAMC,SAAS,GAAG,MAAMF,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB;MAC9CC,MAAM,EAAE;IADsC,CAAxB,CAAxB;IAGA,MAAMC,mBAAmB,GAAG,MAAMnB,QAAQ,CAACoB,QAAT,CAAkBJ,SAAlB,CAAlC;IACA,MAAMK,QAAQ,GAAG,MAAM,IAAIR,IAAI,CAACS,GAAL,CAASC,QAAb,CACrBvB,QAAQ,CAACwB,GADY,EAErBL,mBAAmB,CAACM,OAFC,CAAvB;IAGA,MAAMb,KAAK,GAAG,MAAM,IAAIS,QAAQ,CAACK,OAAT,CAAiBC,OAArB,CAA6BnB,GAA7B,EAAkCoB,IAAlC,EAApB;IACAlB,OAAO,CAACC,GAAR,CAAYC,KAAZ;EACH,CAZD;AAaD,CAdM;AAgBP,OAAO,MAAMiB,SAAS,GAAIC,OAAD,IAAa;EACpC,OAAO,MAAOrB,QAAP,IAAoB;IACzBA,QAAQ,CAACR,gBAAgB,EAAjB,CAAR;;IACA,IAAI;MACF,IAAI8B,OAAO,GAAG,MAAMjC,KAAK,CACtBkC,QADiB,GAEjBC,UAFiB,CAENC,QAFM,CAEGR,OAFH,CAEWS,OAFX,GAGjBP,IAHiB,EAApB;MAKA,IAAIQ,YAAY,GAAG,MAAMtC,KAAK,CAC3BkC,QADsB,GAEtBC,UAFsB,CAEXC,QAFW,CAEFR,OAFE,CAEMW,YAFN,CAEmBP,OAFnB,EAGtBF,IAHsB,EAAzB;MAKA,IAAIhB,KAAK,GAAI,MAAMd,KAAK,CACvBkC,QADkB,GAElBC,UAFkB,CAEPC,QAFO,CAEER,OAFF,CAEUC,OAFV,CAEkBI,OAAO,CAAC,EAAD,CAAP,CAAYO,EAF9B,EAGlBV,IAHkB,EAAnB;MAKAnB,QAAQ,CACNN,gBAAgB,CAAC;QACf4B,OADe;QAEfK,YAFe;QAGfxB;MAHe,CAAD,CADV,CAAR;IAOD,CAvBD,CAuBE,OAAO2B,GAAP,EAAY;MACZ7B,OAAO,CAACC,GAAR,CAAY4B,GAAZ;MACA9B,QAAQ,CAACJ,eAAe,CAAC,oCAAD,CAAhB,CAAR;IACD;EACF,CA7BD;AA8BD,CA/BM"},"metadata":{},"sourceType":"module"}