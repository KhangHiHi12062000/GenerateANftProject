[{"/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/index.js":"1","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/reportWebVitals.js":"2","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/App.js":"3","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/store.js":"4","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/styles/globalStyles.js":"5","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/data/dataActions.js":"6","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/components/lipRenderer.js":"7","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/blockchain/blockchainReducer.js":"8","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/data/dataReducer.js":"9","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/blockchain/blockchainActions.js":"10","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/parts/parts.js":"11","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/components/formInput.js":"12","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/components/Navbar.js":"13","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/components/menuItems.js":"14","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/components/Button.js":"15","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/components/Shop.js":"16","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/components/Assets.js":"17","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/components/Home.js":"18"},{"size":631,"mtime":1660190530868,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1659539366092,"results":"21","hashOfConfig":"20"},{"size":2124,"mtime":1660205386142,"results":"22","hashOfConfig":"20"},{"size":603,"mtime":1659580407440,"results":"23","hashOfConfig":"20"},{"size":1774,"mtime":1659539366092,"results":"24","hashOfConfig":"20"},{"size":2530,"mtime":1660207871476,"results":"25","hashOfConfig":"20"},{"size":1897,"mtime":1659670441058,"results":"26","hashOfConfig":"20"},{"size":1148,"mtime":1659842524979,"results":"27","hashOfConfig":"20"},{"size":825,"mtime":1660204212668,"results":"28","hashOfConfig":"20"},{"size":3281,"mtime":1659842448770,"results":"29","hashOfConfig":"20"},{"size":2162,"mtime":1659539366088,"results":"30","hashOfConfig":"20"},{"size":280,"mtime":1659931327174,"results":"31","hashOfConfig":"20"},{"size":2160,"mtime":1660192201001,"results":"32","hashOfConfig":"20"},{"size":388,"mtime":1660184496893,"results":"33","hashOfConfig":"20"},{"size":602,"mtime":1659973752356,"results":"34","hashOfConfig":"20"},{"size":3390,"mtime":1660208133053,"results":"35","hashOfConfig":"20"},{"size":6908,"mtime":1660205208896,"results":"36","hashOfConfig":"20"},{"size":1570,"mtime":1660202554771,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"bze0so",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"40"},"/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/index.js",[],["84","85"],"/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/reportWebVitals.js",[],"/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/App.js",["86","87","88","89","90","91","92","93","94","95","96","97","98"],"import React, { useEffect, useState ,createContext} from \"react\";\nimport \"./App.css\";\nimport { useDispatch, useSelector} from \"react-redux\";\nimport { connect, sendTransacsion} from \"./redux/blockchain/blockchainActions\";\nimport { fetchData , getOwner } from \"./redux/data/dataActions\";\nimport * as s from \"./styles/globalStyles\";\nimport { BrowserRouter as Router, Route, Routes , useNavigate} from 'react-router-dom'\nimport LipRenderer from \"./components/lipRenderer\";\nimport formInput from \"./components/formInput\";\nimport Navbar from \"./components/Navbar\";\nimport _color from \"./assets/images/bg/_color.png\";\nimport Shop from \"./components/Shop\";\nimport Assets from \"./components/Assets\";\nimport Home from \"./components/Home\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const blockchain = useSelector((state) => state.blockchain);\n  const data = useSelector((state) => state.data);\n  const [loading, setLoading] = useState(false);\n  const [name, setName] = useState(\"\");\n  //const authContext = createContext();\n\n  const handleConnect = (e) => {\n      e.preventDefault();\n      dispatch(connect());\n  }\n\n  const transferFrom = (_account, _to, _id) => {\n    setLoading(true);\n    blockchain.lipToken.methods\n      .transferFrom(_account,_to,_id)\n      .send({\n        from: _account,\n      })\n      .once(\"error\", (err) => {\n        setLoading(false);\n        console.log(err);\n      })\n      .then((receipt) => {\n        setLoading(false);\n        console.log(receipt);\n        dispatch(fetchData(blockchain.account));\n      });\n  };\n\n  useEffect(() => {\n    if (blockchain.account != \"\" && blockchain.lipToken != null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  }, [blockchain.lipToken]);\n  \n  return (\n    <s.Screen image={_color}>\n      <Navbar />\n      <Router>\n          <Routes>\n            <Route exact path=\"/Home\" element={<Home account={blockchain.account} onclick={handleConnect}/>}/>\n            <Route exact path=\"/Shop\" element={<Shop/>}/>\n            <Route exact path=\"/Assets\" element={<Assets/>}/>\n          </Routes>\n      </Router>\n    </s.Screen>\n  );\n\n}\n\nexport default App;\n","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/store.js",[],"/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/styles/globalStyles.js",[],"/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/data/dataActions.js",["99"],"// log\nimport store from \"../store\";\nimport Web3 from \"web3\";\nimport LipToken from \"../../contracts/LipToken.json\";\nimport NFTTrader from \"../../contracts/NFTTrader.json\"\n\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\nconst getOwnerRequest = (payload) => {\n  return {\n    type: \"OWNER\",\n    payload: payload,\n  };\n};\n\nexport const getOwner = async (_id) => {\n      const web3 = new Web3(window.ethereum);\n      const networkId = await window.ethereum.request({\n        method: \"net_version\",\n      });\n      const lipTokenNetworkData = await LipToken.networks[networkId];\n      if (lipTokenNetworkData) {\n      const contract = await new web3.eth.Contract(\n        LipToken.abi,\n        lipTokenNetworkData.address);\n      const owner = await contract.methods.ownerOf(_id).call();\n      return owner;\n      }\n      \n}\n\nexport const getListing = async (_id) => {\n  const web3 = new Web3(window.ethereum);\n  const networkId = await window.ethereum.request({\n    method: \"net_version\",\n  });\n  const TraderNetworkData = await NFTTrader.networks[networkId];\n  if (TraderNetworkData) {\n  const contract = new web3.eth.Contract(\n    NFTTrader.abi,\n    TraderNetworkData.address);\n  const item = await contract.methods.methods.listings(\"0xB8170e2AD08812a2403697873B5CddEE8Ac09D81\",_id)\n  return item;\n  }\n  \n}\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let allLips = await store\n        .getState()\n        .blockchain.lipToken.methods.getLips()\n        .call();\n\n      let allOwnerLips = await store\n        .getState()\n        .blockchain.lipToken.methods.getOwnerLips(account)\n        .call();\n      let approvedLips = [];\n      allLips.forEach( async (element) => {\n        await store\n        .getState()\n        .blockchain.nftTrader.methods.listings(\"0xB8170e2AD08812a2403697873B5CddEE8Ac09D81\",element.id)\n        .call().then((result)=>{\n          if(result.price !== \"0\"){ approvedLips.push(element)}\n        });\n      });\n\n      dispatch(\n        fetchDataSuccess({\n          allLips,\n          allOwnerLips,\n          approvedLips,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/components/lipRenderer.js",["100"],"import React from \"react\";\n// cards\nimport { parts } from \"../parts/parts\";\nimport _r1 from \"../assets/images/rarity/_rarity_1.png\";\nimport _r2 from \"../assets/images/rarity/_rarity_2.png\";\nimport _r3 from \"../assets/images/rarity/_rarity_3.png\";\n\nconst LipRenderer = ({ lip = null, size = 200, style }) => {\n  if (!lip) {\n    return null;\n  }\n  let rarity = _r1;\n\n  if (lip.rarity >= 80) {\n    rarity = _r2;\n  }\n  if (lip.rarity >= 95) {\n    rarity = _r3;\n  }\n\n  let dnaStr = String(lip.dna);\n\n  while (dnaStr.length < 16) dnaStr = \"0\" + dnaStr;\n\n  let lipDeatils = {\n    bg: dnaStr.substring(0, 2) % 5,\n    mask: dnaStr.substring(2, 4) % 5,\n    line: dnaStr.substring(4, 6) % 5,\n    addon: dnaStr.substring(6, 8) % 5,\n    addonMouth1: dnaStr.substring(8, 10) % 5,\n    addonMouth2: dnaStr.substring(10, 12) % 5,\n    addonMouth3: dnaStr.substring(12, 14) % 5,\n    name: lip.name,\n  };\n\n  const lipStyle = {\n    width: \"100%\",\n    height: \"100%\",\n    position: \"absolute\",\n  };\n\n  return (\n    <div\n      style={{\n        minWidth: size,\n        minHeight: size,\n        background: \"blue\",\n        position: \"relative\",\n        ...style,\n      }}\n    >\n      <img alt={\"bg\"} src={parts.bg[lipDeatils.bg]} style={lipStyle} />\n      <img alt={\"mask\"} src={parts.mask[lipDeatils.mask]} style={lipStyle} />\n      <img alt={\"line\"} src={parts.line[lipDeatils.line]} style={lipStyle} />\n      <img alt={\"addon\"} src={parts.addon[lipDeatils.addon]} style={lipStyle} />\n      <img\n        alt={\"addon_mouth\"}\n        src={parts.addonMouth1[lipDeatils.addonMouth1]}\n        style={lipStyle}\n      />\n      <img\n        alt={\"addon_mouth\"}\n        src={parts.addonMouth2[lipDeatils.addonMouth2]}\n        style={lipStyle}\n      />\n      <img\n        alt={\"addon_mouth\"}\n        src={parts.addonMouth3[lipDeatils.addonMouth3]}\n        style={lipStyle}\n      />\n    </div>\n  );\n};\n\nexport default LipRenderer;\n","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/blockchain/blockchainReducer.js",[],"/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/data/dataReducer.js",[],"/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/redux/blockchain/blockchainActions.js",["101","102","103"],"// constants\nimport Web3 from \"web3\";\nimport LipToken from \"../../contracts/LipToken.json\";\nimport NFTTrader from \"../../contracts/NFTTrader.json\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const sendTransacsion = (_acount, _to) =>{\n  return async (dispatch) => {\n      try {\n        let params = [{\n          \"from\":_acount,\n          \"to\":_to,\n          \"gas\": Number(30000).toString(16),\n          \"gasPrice\":Number(250000000).toString(16),\n          \"value\":Number(10000000000000000000).toString(16),\n        }];\n\n        const accounts = await window.ethereum.request({\n          method: \"eth_sendTransaction\", params\n        });\n      } catch (err) {\n        console.log(err);        \n      }\n\n};\n};\n\n\nconst getOwnerRequest = (payload) => {\n  return{\n    type: \"OWNER\",\n    payload: payload,\n  };\n};\nconst sendTransacsionRequest = (payload) => {\n  return{\n    type: \"SEND\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\",\n        });\n        console.log(networkId);\n        const lipTokenNetworkData = await LipToken.networks[networkId];\n        console.log(lipTokenNetworkData);\n        const nftTraderNetwork = await NFTTrader.networks[networkId];\n        console.log(nftTraderNetwork);\n        if (lipTokenNetworkData) {\n          web3.eth.getAccounts();\n            const lipToken = new web3.eth.Contract(\n            LipToken.abi,\n            lipTokenNetworkData.address\n          );\n            const nftTrader = new web3.eth.Contract(\n            NFTTrader.abi,\n            nftTraderNetwork.address\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              lipToken: lipToken,\n              nftTrader: nftTrader,\n              web3: web3,\n            })\n          );\n\n          // Add listeners start\n          \n          window.ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Polygon.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/parts/parts.js",[],"/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/components/formInput.js",[],"/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/components/Navbar.js",["104","105","106","107","108","109","110","111","112","113","114","115","116"],"import React, { Component, useState ,useEffect, useAuth} from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { menuItems } from \"./menuItems\";\nimport { FaBeer } from 'react-icons/fa';\nimport \"./Navbar.css\"\nimport { Button } from \"./Button\";\nimport _logo from \"../assets/images/bg/LOGO.png\";\nimport { useDispatch, useSelector} from \"react-redux\";\nimport { connect, sendTransacsion} from \"../redux/blockchain/blockchainActions\"\nimport { fetchData , getOwner } from \"../redux/data/dataActions\";\nimport * as s from \"../styles/globalStyles\";\n\nconst Navbar = (props) => {\n    const [clicked,setClicked]= useState(false);\n    const dispatch = useDispatch();\n    const blockchain = useSelector((state) => state.blockchain);\n    const data = useSelector((state) => state.data);\n    //const auth = useAuth();\n\n    const handleClick = () => {\n        setClicked(!clicked);\n    };\n\n    useEffect(() => {\n        if (blockchain.account != \"\" && blockchain.lipToken != null) {\n          dispatch(fetchData(blockchain.account));\n        }\n      }, [blockchain.lipToken]);\n    return(\n        <nav className=\"NavbarItems\">\n            <h1 className=\"navbar-logo\">NFT Project\n                \n            <i className=\"fab fa-react\"></i></h1>\n            <div><img className=\"img\" src={_logo} width = \"50\" height = \"50\"></img></div>\n            \n            <div className=\"menu-icon\" onClick={handleClick}>\n                <i className={clicked ? 'fas fa-times' : 'fas fa-bars'}></i>\n            </div>\n            <ul className={clicked ? 'nav-menu active' : 'nav-menu'}>\n                {menuItems.map((item,index) => {\n                    return(\n                    <li key={index}>\n                        <a className={item.cName} href={item.url}>\n                            {item.title}\n                        </a>\n                    </li>\n                    );\n                })}\n            </ul>\n            <button\n            onClick={(e) => {\n              e.preventDefault();\n              dispatch(connect());\n            }}\n            >\n            CONNECT\n          </button>         \n        </nav>\n    )\n}\n\nexport default Navbar;","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/components/menuItems.js",[],"/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/components/Button.js",["117"],"import React, { Children } from \"react\";\nimport \"./Button.css\";\n\nconst STYLES = [\n    'btn--primary',\n    'btn--outline'\n]\n\nconst SIZES = [\n    'btn--medium',\n    'btn--large'\n]\n\nexport const Button = ({\n    children,\n    type,\n    onclick,\n    buttonStyle,\n    buttonSize\n}) => {\n    const checkButtonStyle = STYLES.includes(buttonStyle) ? buttonStyle : STYLES[0];\n\n    const checkButtonSize = SIZES.includes(buttonSize) ? buttonSize : SIZES[0]; \n\n    return (\n        <button className={`btn ${checkButtonStyle} ${checkButtonSize}`} onClick={onclick}>\n            {children}\n        </button>\n    )\n}","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/components/Shop.js",["118","119","120","121","122","123"],"import React, {useEffect , useState} from \"react\";\nimport { useDispatch, useSelector} from \"react-redux\";\nimport { connect, sendTransacsion} from \"../redux/blockchain/blockchainActions\"\nimport { fetchData , getOwner } from \"../redux/data/dataActions\";\nimport * as s from \"../styles/globalStyles\";\nimport LipRenderer from \"./lipRenderer\";\nimport { getListing } from \"../redux/data/dataActions\";\n\n\nconst Shop = (props) => {\n    const dispatch = useDispatch();\n    const blockchain = useSelector((state) => state.blockchain);\n    const data = useSelector((state) => state.data);\n    const [loading, setLoading] = useState(false);\n\n    const purchase = (_constractAddr, _id) => {\n        setLoading(true);\n        blockchain.nftTrader.methods\n          .purchase(_constractAddr, _id, 1)\n          .send({\n            from: blockchain.account,\n            value: blockchain.web3.utils.toWei(\"0.01\", \"ether\"),\n          })\n          .once(\"error\", (err) => {\n            setLoading(false);\n            console.log(err);\n          })\n          .then((receipt) => {\n            setLoading(false);\n            console.log(receipt);\n            dispatch(fetchData(blockchain.account));\n          });\n    };\n\n    // useEffect(() => {\n    //     if (blockchain.account != \"\" && blockchain.lipToken != null) {\n    //       dispatch(fetchData(blockchain.account));\n    //     }\n    //   }, [blockchain.lipToken]);\n      console.table(data.allLips)\n      console.log(data.approvedLips)\n      console.log(data.approvedLips.length)\n    return(\n         <s.Container jc={\"center\"} fd={\"row\"} style={{ flexWrap: \"wrap\" }}>\n            {data.allLips.map((item, index) => {\n                    return (\n                        <s.Container key={index} style={{ padding: \"15px\" }}>\n                          <LipRenderer lip={item} />\n                          <s.SpacerXSmall />\n                          <s.Container>\n                            <s.TextDescription>ID: {item.id}</s.TextDescription>\n                            <s.TextDescription>DNA: {item.dna}</s.TextDescription>\n                            <s.TextDescription>LEVEL: {item.level}</s.TextDescription>\n                            <s.TextDescription>NAME: {item.name}</s.TextDescription>\n                            <s.SpacerXSmall />\n                            <button\n                              disabled={loading ? 1 : 0}\n                              onClick={(e) => {\n                                e.preventDefault();\n                                console.log(data);\n                                const result1 = getOwner(item.id).then((result)=>{\n                                \n                                  if(result != blockchain.account){\n                                    purchase(blockchain.lipToken._address, item.id);\n                                  }else{\n                                    console.log(\"Can not transfer\");\n                                  }\n                                  return result;\n                                })\n                              }\n                            }\n                            >\n                              BuyNFT\n                            </button>\n                          </s.Container>\n                        </s.Container>\n                      );\n                    })}\n                  </s.Container>\n            ) \n}\nexport default Shop;","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/components/Assets.js",["124","125","126","127","128","129"],"import React, {useEffect , useState} from \"react\";\nimport { useDispatch, useSelector} from \"react-redux\";\nimport { connect, sendTransacsion} from \"../redux/blockchain/blockchainActions\"\nimport { fetchData , getOwner } from \"../redux/data/dataActions\";\nimport * as s from \"../styles/globalStyles\";\nimport LipRenderer from \"./lipRenderer\";\n\nconst Assets = (props) => {\n    const dispatch = useDispatch();\n    const blockchain = useSelector((state) => state.blockchain);\n    const data = useSelector((state) => state.data);\n    const [loading, setLoading] = useState(false);\n    const [name, setName] = useState(\"\");\n\n    const mintNFT = (_account, _name) => {\n        setLoading(true);\n        blockchain.lipToken.methods\n          .createRandomLip(_name)\n          .send({\n            from: _account,\n            value: blockchain.web3.utils.toWei(\"0.01\", \"ether\"),\n          })\n          .once(\"error\", (err) => {\n            setLoading(false);\n            console.log(err);\n          })\n          .then((receipt) => {\n            setLoading(false);\n            console.log(receipt);\n            dispatch(fetchData(blockchain.account));\n          });\n      };\n\n      const addListingTrader = (_price, _account, _id) => {\n        setLoading(true);\n        blockchain.nftTrader.methods\n          .addListing(_price, _account, _id)\n          .send({\n            from: blockchain.account,\n          })\n          .once(\"error\", (err) => {\n            setLoading(false);\n            console.log(err);\n          })\n          .then((receipt) => {\n            setLoading(false);\n            console.log(receipt);\n            dispatch(fetchData(blockchain.account));\n          });\n      };\n    \n      const purchase = (_constractAddr, _id) => {\n        setLoading(true);\n        blockchain.nftTrader.methods\n          .purchase(_constractAddr, _id, 1)\n          .send({\n            from: blockchain.account,\n            value: blockchain.web3.utils.toWei(\"0.01\", \"ether\"),\n          })\n          .once(\"error\", (err) => {\n            setLoading(false);\n            console.log(err);\n          })\n          .then((receipt) => {\n            setLoading(false);\n            console.log(receipt);\n            dispatch(fetchData(blockchain.account));\n          });\n      };\n    \n      const BurnNft = ( _id) => {\n        setLoading(true);\n        blockchain.lipToken.methods\n          ._burn(_id)\n          .send({\n            from: blockchain.account,\n          })\n          .once(\"error\", (err) => {\n            setLoading(false);\n            console.log(err);\n          })\n          .then((receipt) => {\n            setLoading(false);\n            console.log(receipt);\n            dispatch(fetchData(blockchain.account));\n          });\n      };\n    \n      const setApprovedForAll = (_contractAddr, _approved) => {\n        setLoading(true);\n        blockchain.lipToken.methods\n          .setApprovalForAll(_contractAddr,_approved)\n          .send({\n            from: blockchain.account,\n          })\n          .once(\"error\", (err) => {\n            setLoading(false);\n            console.log(err);\n          })\n          .then((receipt) => {\n            setLoading(false);\n            console.log(receipt);\n            dispatch(fetchData(blockchain.account));\n          });\n      };\n    \n      const levelUpLip = (_account, _id) => {\n        setLoading(true);\n        blockchain.lipToken.methods\n          .levelUp(_id)\n          .send({\n            from: _account,\n          })\n          .once(\"error\", (err) => {\n            setLoading(false);\n            console.log(err);\n          })\n          .then((receipt) => {\n            setLoading(false);\n            console.log(receipt);\n            dispatch(fetchData(blockchain.account));\n          });\n      };\n\n    // useEffect(() => {\n    //     if (blockchain.account != \"\" && blockchain.lipToken != null) {\n    //       dispatch(fetchData(blockchain.account));\n    //     }\n    //   }, [blockchain.lipToken]);\n\n    return(\n         <div>\n      {blockchain.account === \"\" || blockchain.lipToken === null ? (\n        <s.Container ai={\"center\"} style={{ padding: \"24px\" }}>\n            <s.TextTitle>Need click to connect button</s.TextTitle>\n        </s.Container>\n        \n      ) : (\n        <s.Container ai={\"center\"} style={{ padding: \"24px\" }}>\n          <s.TextTitle>Welcome to the game</s.TextTitle>\n          <s.SpacerSmall />\n          <form>\n            <label>\n              <input \n              type=\"text\" \n              name=\"name\" \n              placeholder=\"Enter Name of NFT\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}></input> \n              </label>\n            \n                <input type=\"button\" value=\"CREATE NFT LIP\" \n                onClick={(e) => {\n              e.preventDefault();\n              mintNFT(blockchain.account, name);\n            }}/>\n          </form>\n\n          <s.SpacerMedium />\n          <s.Container jc={\"center\"} fd={\"row\"} style={{ flexWrap: \"wrap\" }}>\n            {data.allOwnerLips.map((item, index) => {\n                \n              return (\n                <s.Container key={index} style={{ padding: \"15px\" }}>\n                  <LipRenderer lip={item} />\n                  <s.SpacerXSmall />\n                  <s.Container>\n                    <s.TextDescription>ID: {item.id}</s.TextDescription>\n                    <s.TextDescription>DNA: {item.dna}</s.TextDescription>\n                    <s.TextDescription>LEVEL: {item.level}</s.TextDescription>\n                    <s.TextDescription>NAME: {item.name}</s.TextDescription>\n                    <s.SpacerXSmall />\n                    {()=>{\n                      \n                    }}\n                    <button\n                      disabled={loading ? 1 : 0}\n                      onClick={(e) => {\n                        e.preventDefault();\n                        levelUpLip(blockchain.account, item.id);\n                      }}\n                    >\n                      Level Up\n                    </button>\n                    <button\n                      disabled={loading ? 1 : 0}\n                      onClick={(e) => {\n                        e.preventDefault();\n                        console.log(blockchain.lipToken._address);\n                        const result1 = getOwner(item.id).then((result)=>{\n                  \n                            setApprovedForAll(blockchain.nftTrader._address, true);\n                              \n                            addListingTrader(\"100000\",blockchain.lipToken._address,item.id);\n                          return result;\n                        })\n\n                      }}\n                    >\n                      Sell\n                    </button>\n                  </s.Container>\n                </s.Container>\n              );\n            })}\n          </s.Container>\n        </s.Container>\n      )}\n      </div>\n    )\n}\nexport default Assets;","/home/khangnt-leo/GR1-Project/nft-generate/nft_game/src/components/Home.js",["130","131","132","133","134","135","136"],"import React, {useEffect} from \"react\";\nimport { useDispatch, useSelector} from \"react-redux\";\nimport { connect, sendTransacsion} from \"../redux/blockchain/blockchainActions\"\nimport { fetchData , getOwner } from \"../redux/data/dataActions\";\nimport * as s from \"../styles/globalStyles\";\nimport LipRenderer from \"./lipRenderer\";\n\nconst Home = (props) => {\n    const dispatch = useDispatch();\n    const blockchain = useSelector((state) => state.blockchain);\n    const data = useSelector((state) => state.data);\n\n    return(\n        <div>\n        <s.Container ai={\"center\"} style={{ padding: \"24px\" }}>\n          <s.TextTitle>Welcome to the game</s.TextTitle>\n\n          <s.SpacerMedium />\n          <s.Container jc={\"center\"} fd={\"row\"} style={{ flexWrap: \"wrap\" }}>\n            {data.allLips.map((item, index) => {\n              return (\n                <s.Container key={index} style={{ padding: \"15px\" }}>\n                  <LipRenderer lip={item} />\n                  <s.SpacerXSmall />\n                  <s.Container>\n                    <s.TextDescription>ID: {item.id}</s.TextDescription>\n                    <s.TextDescription>DNA: {item.dna}</s.TextDescription>\n                    <s.TextDescription>LEVEL: {item.level}</s.TextDescription>\n                    <s.TextDescription>NAME: {item.name}</s.TextDescription>\n                    <s.SpacerXSmall />\n                    \n                  </s.Container>\n                </s.Container>\n              );\n            })}\n          </s.Container>\n        </s.Container>\n      </div>\n    )\n}\nexport default Home;",{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":1,"column":38,"nodeType":"143","messageId":"144","endLine":1,"endColumn":51},{"ruleId":"141","severity":1,"message":"145","line":4,"column":19,"nodeType":"143","messageId":"144","endLine":4,"endColumn":34},{"ruleId":"141","severity":1,"message":"146","line":5,"column":22,"nodeType":"143","messageId":"144","endLine":5,"endColumn":30},{"ruleId":"141","severity":1,"message":"147","line":7,"column":51,"nodeType":"143","messageId":"144","endLine":7,"endColumn":62},{"ruleId":"141","severity":1,"message":"148","line":8,"column":8,"nodeType":"143","messageId":"144","endLine":8,"endColumn":19},{"ruleId":"141","severity":1,"message":"149","line":9,"column":8,"nodeType":"143","messageId":"144","endLine":9,"endColumn":17},{"ruleId":"141","severity":1,"message":"150","line":19,"column":9,"nodeType":"143","messageId":"144","endLine":19,"endColumn":13},{"ruleId":"141","severity":1,"message":"151","line":20,"column":10,"nodeType":"143","messageId":"144","endLine":20,"endColumn":17},{"ruleId":"141","severity":1,"message":"152","line":21,"column":10,"nodeType":"143","messageId":"144","endLine":21,"endColumn":14},{"ruleId":"141","severity":1,"message":"153","line":21,"column":16,"nodeType":"143","messageId":"144","endLine":21,"endColumn":23},{"ruleId":"141","severity":1,"message":"154","line":29,"column":9,"nodeType":"143","messageId":"144","endLine":29,"endColumn":21},{"ruleId":"155","severity":1,"message":"156","line":48,"column":28,"nodeType":"157","messageId":"158","endLine":48,"endColumn":30},{"ruleId":"159","severity":1,"message":"160","line":51,"column":6,"nodeType":"161","endLine":51,"endColumn":27,"suggestions":"162"},{"ruleId":"141","severity":1,"message":"163","line":27,"column":7,"nodeType":"143","messageId":"144","endLine":27,"endColumn":22},{"ruleId":"141","severity":1,"message":"164","line":18,"column":5,"nodeType":"143","messageId":"144","endLine":18,"endColumn":11},{"ruleId":"141","severity":1,"message":"165","line":46,"column":15,"nodeType":"143","messageId":"144","endLine":46,"endColumn":23},{"ruleId":"141","severity":1,"message":"163","line":57,"column":7,"nodeType":"143","messageId":"144","endLine":57,"endColumn":22},{"ruleId":"141","severity":1,"message":"166","line":63,"column":7,"nodeType":"143","messageId":"144","endLine":63,"endColumn":29},{"ruleId":"141","severity":1,"message":"167","line":1,"column":17,"nodeType":"143","messageId":"144","endLine":1,"endColumn":26},{"ruleId":"141","severity":1,"message":"168","line":1,"column":49,"nodeType":"143","messageId":"144","endLine":1,"endColumn":56},{"ruleId":"141","severity":1,"message":"169","line":2,"column":10,"nodeType":"143","messageId":"144","endLine":2,"endColumn":14},{"ruleId":"141","severity":1,"message":"170","line":2,"column":16,"nodeType":"143","messageId":"144","endLine":2,"endColumn":26},{"ruleId":"141","severity":1,"message":"171","line":4,"column":10,"nodeType":"143","messageId":"144","endLine":4,"endColumn":16},{"ruleId":"141","severity":1,"message":"172","line":6,"column":10,"nodeType":"143","messageId":"144","endLine":6,"endColumn":16},{"ruleId":"141","severity":1,"message":"145","line":9,"column":19,"nodeType":"143","messageId":"144","endLine":9,"endColumn":34},{"ruleId":"141","severity":1,"message":"146","line":10,"column":22,"nodeType":"143","messageId":"144","endLine":10,"endColumn":30},{"ruleId":"141","severity":1,"message":"173","line":11,"column":13,"nodeType":"143","messageId":"144","endLine":11,"endColumn":14},{"ruleId":"141","severity":1,"message":"150","line":17,"column":11,"nodeType":"143","messageId":"144","endLine":17,"endColumn":15},{"ruleId":"155","severity":1,"message":"156","line":25,"column":32,"nodeType":"157","messageId":"158","endLine":25,"endColumn":34},{"ruleId":"159","severity":1,"message":"160","line":28,"column":10,"nodeType":"161","endLine":28,"endColumn":31,"suggestions":"174"},{"ruleId":"175","severity":1,"message":"176","line":34,"column":18,"nodeType":"177","endLine":34,"endColumn":78},{"ruleId":"141","severity":1,"message":"178","line":1,"column":17,"nodeType":"143","messageId":"144","endLine":1,"endColumn":25},{"ruleId":"141","severity":1,"message":"179","line":1,"column":16,"nodeType":"143","messageId":"144","endLine":1,"endColumn":25},{"ruleId":"141","severity":1,"message":"180","line":3,"column":10,"nodeType":"143","messageId":"144","endLine":3,"endColumn":17},{"ruleId":"141","severity":1,"message":"145","line":3,"column":19,"nodeType":"143","messageId":"144","endLine":3,"endColumn":34},{"ruleId":"141","severity":1,"message":"181","line":7,"column":10,"nodeType":"143","messageId":"144","endLine":7,"endColumn":20},{"ruleId":"141","severity":1,"message":"182","line":61,"column":39,"nodeType":"143","messageId":"144","endLine":61,"endColumn":46},{"ruleId":"155","severity":1,"message":"156","line":63,"column":45,"nodeType":"157","messageId":"158","endLine":63,"endColumn":47},{"ruleId":"141","severity":1,"message":"179","line":1,"column":16,"nodeType":"143","messageId":"144","endLine":1,"endColumn":25},{"ruleId":"141","severity":1,"message":"180","line":3,"column":10,"nodeType":"143","messageId":"144","endLine":3,"endColumn":17},{"ruleId":"141","severity":1,"message":"145","line":3,"column":19,"nodeType":"143","messageId":"144","endLine":3,"endColumn":34},{"ruleId":"141","severity":1,"message":"183","line":52,"column":13,"nodeType":"143","messageId":"144","endLine":52,"endColumn":21},{"ruleId":"141","severity":1,"message":"184","line":71,"column":13,"nodeType":"143","messageId":"144","endLine":71,"endColumn":20},{"ruleId":"141","severity":1,"message":"182","line":190,"column":31,"nodeType":"143","messageId":"144","endLine":190,"endColumn":38},{"ruleId":"141","severity":1,"message":"179","line":1,"column":16,"nodeType":"143","messageId":"144","endLine":1,"endColumn":25},{"ruleId":"141","severity":1,"message":"180","line":3,"column":10,"nodeType":"143","messageId":"144","endLine":3,"endColumn":17},{"ruleId":"141","severity":1,"message":"145","line":3,"column":19,"nodeType":"143","messageId":"144","endLine":3,"endColumn":34},{"ruleId":"141","severity":1,"message":"185","line":4,"column":10,"nodeType":"143","messageId":"144","endLine":4,"endColumn":19},{"ruleId":"141","severity":1,"message":"146","line":4,"column":22,"nodeType":"143","messageId":"144","endLine":4,"endColumn":30},{"ruleId":"141","severity":1,"message":"186","line":9,"column":11,"nodeType":"143","messageId":"144","endLine":9,"endColumn":19},{"ruleId":"141","severity":1,"message":"187","line":10,"column":11,"nodeType":"143","messageId":"144","endLine":10,"endColumn":21},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"no-unused-vars","'createContext' is defined but never used.","Identifier","unusedVar","'sendTransacsion' is defined but never used.","'getOwner' is defined but never used.","'useNavigate' is defined but never used.","'LipRenderer' is defined but never used.","'formInput' is defined but never used.","'data' is assigned a value but never used.","'loading' is assigned a value but never used.","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'transferFrom' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'blockchain.account' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["190"],"'getOwnerRequest' is assigned a value but never used.","'rarity' is assigned a value but never used.","'accounts' is assigned a value but never used.","'sendTransacsionRequest' is assigned a value but never used.","'Component' is defined but never used.","'useAuth' is defined but never used.","'Link' is defined but never used.","'useHistory' is defined but never used.","'FaBeer' is defined but never used.","'Button' is defined but never used.","'s' is defined but never used.",["191"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Children' is defined but never used.","'useEffect' is defined but never used.","'connect' is defined but never used.","'getListing' is defined but never used.","'result1' is assigned a value but never used.","'purchase' is assigned a value but never used.","'BurnNft' is assigned a value but never used.","'fetchData' is defined but never used.","'dispatch' is assigned a value but never used.","'blockchain' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"192","fix":"193"},{"desc":"192","fix":"194"},"Update the dependencies array to be: [blockchain.account, blockchain.lipToken, dispatch]",{"range":"195","text":"196"},{"range":"197","text":"196"},[1693,1714],"[blockchain.account, blockchain.lipToken, dispatch]",[1055,1076]]